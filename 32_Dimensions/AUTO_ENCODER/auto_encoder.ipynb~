{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Auto-Encoders to reduce dimension of MNIST from 784 to 32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using gpu device 0: GeForce 920M (CNMeM is disabled, cuDNN 5005)\n",
      "Using Theano backend.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import theano\n",
    "from keras.layers import Dense,Convolution2D,Activation,MaxPooling2D,Flatten,Reshape,Input,UpSampling2D,ZeroPadding2D\n",
    "from keras.models import Sequential,Model,load_model\n",
    "from keras.utils import np_utils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(42000, 784) (42000,)\n"
     ]
    }
   ],
   "source": [
    "x = pd.read_csv('/home/vasu/all_projects/ML/mnist_kaggle/train.csv')\n",
    "X = np.array(x)\n",
    "x = X[:,1:]\n",
    "y = X[:,0]\n",
    "print x.shape,y.shape\n",
    "#x_train = x[:30000,:]\n",
    "#x_crossval = x[30000:,:]\n",
    "#y_train = y[:30000]\n",
    "#y_crossval = y[30000:]\n",
    "#print x_train.shape,x_crossval.shape,y_train.shape,y_crossval.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0 0.0\n"
     ]
    }
   ],
   "source": [
    "#x = (x - x.mean()/x.std())\n",
    "x = x/255.0\n",
    "print x.max() ,x.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "____________________________________________________________________________________________________\n",
      "Layer (type)                     Output Shape          Param #     Connected to                     \n",
      "====================================================================================================\n",
      "input_1 (InputLayer)             (None, 1, 28, 28)     0                                            \n",
      "____________________________________________________________________________________________________\n",
      "convolution2d_1 (Convolution2D)  (None, 32, 26, 26)    320         input_1[0][0]                    \n",
      "____________________________________________________________________________________________________\n",
      "convolution2d_2 (Convolution2D)  (None, 16, 24, 24)    4624        convolution2d_1[0][0]            \n",
      "____________________________________________________________________________________________________\n",
      "maxpooling2d_1 (MaxPooling2D)    (None, 16, 12, 12)    0           convolution2d_2[0][0]            \n",
      "____________________________________________________________________________________________________\n",
      "convolution2d_3 (Convolution2D)  (None, 8, 12, 12)     1160        maxpooling2d_1[0][0]             \n",
      "____________________________________________________________________________________________________\n",
      "flatten_1 (Flatten)              (None, 1152)          0           convolution2d_3[0][0]            \n",
      "____________________________________________________________________________________________________\n",
      "dense_1 (Dense)                  (None, 32)            36896       flatten_1[0][0]                  \n",
      "____________________________________________________________________________________________________\n",
      "dense_2 (Dense)                  (None, 800)           26400       dense_1[0][0]                    \n",
      "____________________________________________________________________________________________________\n",
      "reshape_1 (Reshape)              (None, 8, 10, 10)     0           dense_2[0][0]                    \n",
      "____________________________________________________________________________________________________\n",
      "zeropadding2d_1 (ZeroPadding2D)  (None, 8, 12, 12)     0           reshape_1[0][0]                  \n",
      "____________________________________________________________________________________________________\n",
      "convolution2d_4 (Convolution2D)  (None, 16, 12, 12)    1168        zeropadding2d_1[0][0]            \n",
      "____________________________________________________________________________________________________\n",
      "upsampling2d_1 (UpSampling2D)    (None, 16, 24, 24)    0           convolution2d_4[0][0]            \n",
      "____________________________________________________________________________________________________\n",
      "zeropadding2d_2 (ZeroPadding2D)  (None, 16, 26, 26)    0           upsampling2d_1[0][0]             \n",
      "____________________________________________________________________________________________________\n",
      "convolution2d_5 (Convolution2D)  (None, 32, 26, 26)    4640        zeropadding2d_2[0][0]            \n",
      "____________________________________________________________________________________________________\n",
      "zeropadding2d_3 (ZeroPadding2D)  (None, 32, 28, 28)    0           convolution2d_5[0][0]            \n",
      "____________________________________________________________________________________________________\n",
      "convolution2d_6 (Convolution2D)  (None, 1, 28, 28)     289         zeropadding2d_3[0][0]            \n",
      "====================================================================================================\n",
      "Total params: 75497\n",
      "____________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "inp = Input(shape=(1, 28, 28))\n",
    "\n",
    "c1 = Convolution2D(32, 3, 3, border_mode='valid', activation='relu')(inp)\n",
    "c2 = Convolution2D(16, 3, 3, border_mode='valid', activation='relu')(c1)\n",
    "m1 = MaxPooling2D(pool_size=(2, 2))(c2)\n",
    "c3 = Convolution2D(8, 3, 3, border_mode='same', activation='relu')(m1)\n",
    "f1 = Flatten()(c3)\n",
    "fc1 = Dense(32, activation='relu')(f1)\n",
    "fc2 = Dense(800, activation='relu')(fc1)\n",
    "re1 = Reshape((8, 10, 10))(fc2)\n",
    "zp1 = ZeroPadding2D(padding=(1, 1))(re1)\n",
    "c4 = Convolution2D(16, 3, 3, border_mode='same', activation='relu')(zp1)\n",
    "u1 = UpSampling2D(size=(2, 2))(c4)\n",
    "zp2 = ZeroPadding2D(padding=(1, 1))(u1)\n",
    "c5 = Convolution2D(32, 3, 3, border_mode='same', activation='relu')(zp2)\n",
    "zp3 = ZeroPadding2D(padding=(1, 1))(c5)\n",
    "c6 = Convolution2D(1, 3, 3, border_mode='same', activation='relu')(zp3)\n",
    "\n",
    "model = Model(input=inp, output=c6)\n",
    "encoder = Model(input=inp, output=fc1)\n",
    "\n",
    "model.summary()\n",
    "model.compile(loss='mse', optimizer='adam', metrics=['accuracy'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "x = x.reshape((X.shape[0], 1, 28, 28))\n",
    "#y = y.reshape((y.shape[0], 1, 28, 28))\n",
    "#y = np_utils.to_categorical(y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(42000, 1, 28, 28)\n",
      "(30000, 1, 28, 28) (12000, 1, 28, 28) (30000, 1, 28, 28) (12000, 1, 28, 28)\n"
     ]
    }
   ],
   "source": [
    "print x.shape\n",
    "x_train = x[:30000,:]\n",
    "x_crossval = x[30000:,:]\n",
    "y_train = x[:30000]\n",
    "y_crossval = x[30000:]\n",
    "print x_train.shape,x_crossval.shape,y_train.shape,y_crossval.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 30000 samples, validate on 12000 samples\n",
      "Epoch 1/20\n",
      "30000/30000 [==============================] - 93s - loss: 0.0508 - acc: 0.2335 - val_loss: 0.0243 - val_acc: 0.4495\n",
      "Epoch 2/20\n",
      "30000/30000 [==============================] - 88s - loss: 0.0183 - acc: 0.4759 - val_loss: 0.0152 - val_acc: 0.4990\n",
      "Epoch 3/20\n",
      "30000/30000 [==============================] - 89s - loss: 0.0134 - acc: 0.5144 - val_loss: 0.0127 - val_acc: 0.5201\n",
      "Epoch 4/20\n",
      "30000/30000 [==============================] - 77s - loss: 0.0115 - acc: 0.5330 - val_loss: 0.0109 - val_acc: 0.5396\n",
      "Epoch 5/20\n",
      "30000/30000 [==============================] - 95s - loss: 0.0106 - acc: 0.5438 - val_loss: 0.0101 - val_acc: 0.5465\n",
      "Epoch 6/20\n",
      "30000/30000 [==============================] - 104s - loss: 0.0099 - acc: 0.5506 - val_loss: 0.0097 - val_acc: 0.5549\n",
      "Epoch 7/20\n",
      "30000/30000 [==============================] - 90s - loss: 0.0095 - acc: 0.5555 - val_loss: 0.0093 - val_acc: 0.5511\n",
      "Epoch 8/20\n",
      "30000/30000 [==============================] - 91s - loss: 0.0091 - acc: 0.5598 - val_loss: 0.0091 - val_acc: 0.5482\n",
      "Epoch 9/20\n",
      "30000/30000 [==============================] - 107s - loss: 0.0088 - acc: 0.5633 - val_loss: 0.0088 - val_acc: 0.5656\n",
      "Epoch 10/20\n",
      "30000/30000 [==============================] - 105s - loss: 0.0086 - acc: 0.5662 - val_loss: 0.0085 - val_acc: 0.5729\n",
      "Epoch 11/20\n",
      "30000/30000 [==============================] - 105s - loss: 0.0084 - acc: 0.5693 - val_loss: 0.0088 - val_acc: 0.5704\n",
      "Epoch 12/20\n",
      "30000/30000 [==============================] - 106s - loss: 0.0082 - acc: 0.5717 - val_loss: 0.0082 - val_acc: 0.5730\n",
      "Epoch 13/20\n",
      "30000/30000 [==============================] - 106s - loss: 0.0080 - acc: 0.5734 - val_loss: 0.0081 - val_acc: 0.5734\n",
      "Epoch 14/20\n",
      "30000/30000 [==============================] - 116s - loss: 0.0079 - acc: 0.5762 - val_loss: 0.0080 - val_acc: 0.5741\n",
      "Epoch 15/20\n",
      "30000/30000 [==============================] - 103s - loss: 0.0077 - acc: 0.5766 - val_loss: 0.0078 - val_acc: 0.5703\n",
      "Epoch 16/20\n",
      "30000/30000 [==============================] - 102s - loss: 0.0076 - acc: 0.5738 - val_loss: 0.0076 - val_acc: 0.5641\n",
      "Epoch 17/20\n",
      "30000/30000 [==============================] - 97s - loss: 0.0075 - acc: 0.5688 - val_loss: 0.0076 - val_acc: 0.5572\n",
      "Epoch 18/20\n",
      "30000/30000 [==============================] - 92s - loss: 0.0074 - acc: 0.5649 - val_loss: 0.0084 - val_acc: 0.5553\n",
      "Epoch 19/20\n",
      "30000/30000 [==============================] - 95s - loss: 0.0073 - acc: 0.5595 - val_loss: 0.0077 - val_acc: 0.5564\n",
      "Epoch 20/20\n",
      "30000/30000 [==============================] - 95s - loss: 0.0072 - acc: 0.5547 - val_loss: 0.0075 - val_acc: 0.5552\n"
     ]
    }
   ],
   "source": [
    "hist = model.fit(x_train,y_train,\n",
    "         nb_epoch=20,\n",
    "         shuffle=True,\n",
    "         batch_size=256,\n",
    "          validation_data=(x_crossval,y_crossval))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nRuZbZkMmYAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fcef193d150>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(hist.history['loss'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "encoder.save('enc_32d.h5')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
